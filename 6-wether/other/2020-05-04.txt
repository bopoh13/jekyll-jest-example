Управляем объектами в SVG на своём домене с помощью параметра адресной строки
=====

SVG представляет подмножество языка XML, но несмотря на древность давно занял свою нишу среди векторных форматов изображений.

Основной недостаток SVG представляет его изоляция от основного кода, т. е. он загружается как отдельная страница. Как правило в современных браузерах небольшой код встраивают непосредственно в страницу, но большой проект возникает непреодолимое желание убрать в отдельный файл. Сильной стороной является возможность встраивать JavaScript и CSS, - ей мы и воспользуемся.
<cut />
Мы не будем динамически создавать код SVG. Вместо этого создадим единый файл: группы объектов спрячем внутри парного тега <code>&lt;defs&gt;</code>, зададим стили и анимацию CSS, добавим скрипт для смены изображения и выведем его через тег <code>&lt;use&gt;</code>. А управлять всем будем через параметр адресной строки.

За основу возьмём код птицы из темы: <a href="https://habr.com/post/230443/" title="20 июля 2014 г">https://habr.com/post/230443/</a>

Для начала нужно задать правильные атрибуты, которые полагаются языку XML.
<source lang="xml"><?xml version="1.0" encoding="utf-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ...</source>
Добавим анимацию изображению.
<source lang="css">#wing {
	animation: swing 1.5s ease-out infinite;
	transform-origin: 15% 50%; 
}
@keyframes swing {
	from, to { transform: rotate(5deg); }
	50% { transform: rotate(-5deg); animation-timing-function: ease-in; }
}</source>

Для наглядности перекрасим группу объектов и изменим размер, а помогут нам уже известные <a href="https://habr.com/post/348194/">CSS-переменные</a>. Изменим цвет крыла и тела птицы.
<source lang="css">#wing { fill: var(--wing-color, #81CCAA); }
#body { fill: var(--body-color, #B8E4C2); }</source>
В CSS-стили добавим новый класс. В него мы будем трансформировать нашу птицу. Здесь нужно напомнить, что в SVG можно задавать только те значения атрибутов, которые не были заданы для объектов (если цвет в схеме был указан статически, то изменить его не получится).
<source lang="css">.tomtit {
	transform: scale(.65) translate(60px, 70px);
	--wing-color: #0099CC;
	--body-color: #FFDF34;
}</source>
Осталось за малым. Спрятать группы внутри парного тега <code>&lt;defs&gt;</code>, отрисовать группу объектов <code>&lt;use id="cloth" xlink:href="#bird"/&gt;</code>, и добавить скрипт для выбора класса из значения параметра "<code>c</code>" адресной строки после загрузки файла (скрипт описан ниже).
<source lang="xml"><script type="text/javascript"><![CDATA[
	window.onload = () => {
		const search = window.location.search;
			def = document.getElementById("cloth");
			getClass = search.slice(1).split("&")
				.map(item => item.split("="))
				.find(([ key, value ]) => key === "c");

		if (search.length > 1 && getClass) {
			def.setAttribute("class", getClass[1]);
			console.info(`id="cloth" class="${getClass[1]}"`);
		}
	}
]]></script></source>
<spoiler title="Весь код целиком">
<source lang="xml"><?xml version="1.0" encoding="utf-8" standalone="yes"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	width="1144.12" height="400" viewBox="0 0 572.06 200">
	<title>Cloth</title>
	<metadata>Create by bopoh13 for publication on the Habr, 2020</metadata>
	<style type="text/css"><![CDATA[
		svg { background-color: white; }
		#wing { fill: var(--wing-color, #81CCAA); }
		#body { fill: var(--body-color, #B8E4C2); }
		#pupil { fill: #1F2600; }
		#beak { fill: #F69C0D; }
		.eye-ball { fill: #F6FDC4; }
		.tomtit {
			transform: scale(.65) translate(60px, 70px);
			--wing-color: #0099CC;
			--body-color: #FFDF34;
		}
		#wing {
			animation: swing 1.5s ease-out infinite;
			transform-origin: 15% 50%; 
		}
		@keyframes swing {
			from, to { transform: rotate(5deg); }
			50% { transform: rotate(-5deg); animation-timing-function: ease-in; }
		}
	]]></style>
	<script type="text/javascript"><![CDATA[
		window.onload = () => {
			const search = window.location.search;
				def = document.getElementById("cloth");
				getClass = search.slice(1).split("&")
					.map(item => item.split("="))
					.find(([ key, value ]) => key === "c");	

			if (search.length > 1 && getClass) {
				def.setAttribute("class", getClass[1]);
				console.info(`id="cloth" class="${getClass[1]}"`);
			}
		}
	]]></script>
	<defs>
	<g id="bird">
		<g id="body">
			<path d="M48.42,78.11c0-17.45,14.14-31.58,31.59-31.58s31.59,14.14,31.59,31.58c0,17.44-14.14,31.59-31.59,31.59S48.42,95.56,48.42,78.11"/>
			<path d="M109.19,69.88c0,0-8.5-27.33-42.51-18.53c-34.02,8.81-20.65,91.11,45.25,84.73c40.39-3.65,48.59-24.6,48.59-24.6S124.68,106.02,109.19,69.88"/>
			<path id="wing" d="M105.78,75.09c4.56,0,8.84,1.13,12.62,3.11c0,0,0.01-0.01,0.01-0.01l36.23,12.38c0,0-13.78,30.81-41.96,38.09c-1.51,0.39-2.82,0.59-3.99,0.62c-0.96,0.1-1.92,0.16-2.9,0.16c-15.01,0-27.17-12.17-27.17-27.17C78.61,87.26,90.78,75.09,105.78,75.09"/>
		</g>
		<g id="head">
			<path id="beak" d="M50.43,68.52c0,0-8.81,2.58-10.93,4.86l9.12,9.87C48.61,83.24,48.76,74.28,50.43,68.52"/>
			<circle class="eye-ball" cx="72" cy="71.5" r="11"/>
			<circle id="pupil" cx="72" cy="71.5" r="7"/>
			<circle class="eye-ball" cx="77" cy="74" r="5"/>
		</g>
	</g>
	</defs>
	<use id="cloth" xlink:href="#bird"/>
</svg></source>
</spoiler>
Теперь можно хранить файл SVG в виде отдельного файла-проекта. Пример загрузки:
<code>&lt;object type="image/svg+xml" data="bird.svg?c=tomtit"&gt;Your browser does not support SVGs&lt;/object&gt;</code>

SVG позволяет отображать объекты в зависимости от языковых настроек браузера через <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch">тег Switch</a>. Часто ли в продакшене вы применяете значение пользовательского языка?
